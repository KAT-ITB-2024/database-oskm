import { createId } from '@paralleldrive/cuid2';
import { relations, sql } from 'drizzle-orm';
import { pgTableCreator, pgEnum, text, varchar, timestamp, index, integer, boolean, date, time, unique, primaryKey } from 'drizzle-orm/pg-core';

var o=pgTableCreator(e=>`${e}`),F=pgEnum("faculty",["FITB","FMIPA","FSRD","FTMD","FTTM","FTSL","FTI","SAPPK","SBM","SF","SITH","STEI"]),O=pgEnum("lembaga",["HMJ","Unit"]),U=pgEnum("role",["Peserta","Mentor","Mamet"]),D=pgEnum("gender",["Male","Female"]),M=pgEnum("campus",["Ganesha","Jatinangor","Cirebon"]),P=pgEnum("assignmentType",["Daily","Side"]),C=pgEnum("presenceType",["Hadir","Izin/Sakit","Alpha"]),k=pgEnum("day",["Day 1","Day 2","Day 3","Day 4"]),K=pgEnum("presenceEvent",["Opening","Closing"]),B=pgEnum("classDay",["Day 1","Day 2"]),n=o("users",{id:text("id").primaryKey().$defaultFn(createId),nim:varchar("nim",{length:100}).unique().notNull(),role:U("role").notNull(),password:varchar("password",{length:255}).notNull(),createdAt:timestamp("createdAt",{mode:"date",withTimezone:!0}).notNull().defaultNow(),updatedAt:timestamp("updatedAt",{mode:"date",withTimezone:!0}).notNull()},e=>({idIdx:index().on(e.id),nimIdx:index().on(e.nim)})),H=relations(n,({many:e,one:l})=>({profile:l(v),userMatchesAsFirstUser:e(m,{relationName:"firstUser"}),userMatchesAsSecondUser:e(m,{relationName:"secondUser"}),messages:e(f,{relationName:"sender"}),messagesAsReceiver:e(f,{relationName:"receiver"}),resetToken:l(A),chosenClass:l(b)})),v=o("profiles",{name:varchar("name",{length:255}).notNull(),userId:text("userId").notNull().references(()=>n.id,{onDelete:"cascade"}),faculty:F("faculty").notNull(),gender:D("gender").notNull(),campus:M("campus").notNull(),updatedAt:timestamp("updatedAt",{mode:"date",withTimezone:!0}).notNull(),profileImage:text("profileImage"),groupNumber:integer("groupNumber").notNull(),point:integer("point"),instagram:varchar("instagram",{length:255}),chosenClass:varchar("chosenClass",{length:255}).references(()=>b.id),totalMatch:integer("totalMatch").notNull().default(0),submittedQuest:integer("submittedQuest").notNull().default(0)},e=>({userIdIdx:index().on(e.userId),pointIdx:index().on(e.point)})),L=relations(v,({one:e})=>({users:e(n,{fields:[v.userId],references:[n.id]})})),A=o("resetTokens",{userId:text("id").primaryKey().references(()=>n.id),value:text("value"),createdAt:timestamp("createdAt",{mode:"date",withTimezone:!0}).notNull().defaultNow(),expiredTime:integer("expiredTime").default(3600)}),G=relations(A,({one:e})=>({userId:e(n,{fields:[A.userId],references:[n.id]})})),m=o("userMatches",{id:text("id").primaryKey().$defaultFn(createId),firstUserId:text("firstUserId").notNull().references(()=>n.id,{onDelete:"cascade"}),secondUserId:text("secondUserId").notNull().references(()=>n.id,{onDelete:"cascade"}),topic:varchar("topic",{length:50}).notNull(),isRevealed:boolean("isRevealed").notNull().default(sql`false`),isAnonymous:boolean("isAnonymous").notNull().default(sql`false`),createdAt:timestamp("createdAt",{mode:"date",withTimezone:!0}).notNull().defaultNow(),endedAt:timestamp("endedAt",{mode:"date",withTimezone:!0}).default(sql`null`).$type()}),J=relations(m,({many:e,one:l})=>({firstUser:l(n,{fields:[m.firstUserId],references:[n.id],relationName:"firstUser"}),secondUser:l(n,{fields:[m.secondUserId],references:[n.id],relationName:"secondUser"}),messages:e(f)})),f=o("messages",{id:text("id").primaryKey().$defaultFn(createId),senderId:text("senderId").notNull().references(()=>n.id),receiverId:text("receiverId").notNull().references(()=>n.id),content:text("content").notNull(),isRead:boolean("isRead").notNull().default(sql`false`),createdAt:timestamp("createdAt",{mode:"date",withTimezone:!0}).notNull().defaultNow(),userMatchId:text("userMatchId").notNull().references(()=>m.id,{onDelete:"cascade"})}),Q=relations(f,({many:e,one:l})=>({senderId:l(n,{fields:[f.senderId],references:[n.id],relationName:"sender"}),receiverId:l(n,{fields:[f.receiverId],references:[n.id],relationName:"receiver"}),userMatch:l(m,{fields:[f.userMatchId],references:[m.id]})})),S=o("assignments",{id:text("id").primaryKey().$defaultFn(createId),title:varchar("title",{length:255}).notNull(),description:text("description").notNull(),startTime:timestamp("startTime",{mode:"date",withTimezone:!0}),deadline:timestamp("deadline",{mode:"date",withTimezone:!0}).notNull(),files:varchar("files",{length:255}).array().default(sql`ARRAY[]::varchar[]`),assignmentType:P("assignmentType").notNull(),point:integer("point"),createdAt:timestamp("createdAt",{mode:"date",withTimezone:!0}).notNull().defaultNow(),updatedAt:timestamp("updatedAt",{mode:"date",withTimezone:!0}).notNull()}),T=o("assignmentSubmissions",{id:text("id").primaryKey().$defaultFn(createId),point:integer("point"),assignmentId:text("assignmentId").notNull().references(()=>S.id,{onDelete:"cascade"}),userNim:varchar("userNim",{length:100}).notNull().references(()=>n.nim,{onDelete:"cascade",onUpdate:"cascade"}),files:varchar("files",{length:255}).array().default(sql`ARRAY[]::varchar[]`),createdAt:timestamp("createdAt",{mode:"date",withTimezone:!0}).notNull().defaultNow(),updatedAt:timestamp("updatedAt",{mode:"date",withTimezone:!0}).notNull()},e=>({userIdIdx:index("submission_userId_idx").on(e.userNim)})),Y=relations(T,({one:e})=>({assignment:e(S,{fields:[T.assignmentId],references:[S.id]}),user:e(n,{fields:[T.userNim],references:[n.nim]})})),w=o("characters",{name:varchar("name",{length:255}).notNull().primaryKey(),characterImage:varchar("characterImage",{length:255}).notNull()}),c=o("events",{id:text("id").primaryKey().$defaultFn(createId),day:k("day").notNull(),eventDate:date("eventDate",{mode:"date"}).notNull(),openingOpenPresenceTime:time("openingOpenPresenceTime").notNull(),openingClosePresenceTime:time("openingClosePresenceTime").notNull(),closingOpenPresenceTime:time("closingOpenPresenceTime").notNull(),closingClosePresenceTime:time("closingClosePresenceTime").notNull(),createdAt:timestamp("createdAt",{mode:"date",withTimezone:!0}).notNull().defaultNow(),updatedAt:timestamp("updatedAt",{mode:"date",withTimezone:!0}).notNull(),lore:text("lore").notNull(),characterName:varchar("characterName",{length:255}).notNull().references(()=>w.name),guideBook:varchar("guideBook",{length:255}).notNull(),youtubeVideo:varchar("youtubeVideo",{length:255}).notNull()},e=>({uniqueDayConstraint:unique().on(e.day)})),j=relations(c,({one:e})=>({characters:e(w,{fields:[c.characterName],references:[w.name]})})),W=relations(c,({many:e})=>({eventPresences:e(h)})),h=o("eventPresence",{id:text("id").primaryKey().$defaultFn(createId),eventId:text("eventId").notNull().references(()=>c.id),userNim:varchar("userNim",{length:255}).notNull().references(()=>n.nim),presenceType:C("presenceType").notNull(),presenceEvent:K("presenceEvent").notNull(),createdAt:timestamp("createdAt",{mode:"date",withTimezone:!0}).notNull().defaultNow(),updatedAt:timestamp("updatedAt",{mode:"date",withTimezone:!0}).notNull()},e=>({eventIdIdx:index("presence_eventId_idx").on(e.eventId),userIdIdx:index("presence_userId_idx").on(e.userNim),uniquePresenceConstraint:unique().on(e.eventId,e.presenceEvent,e.userNim)})),X=relations(h,({one:e})=>({event:e(c,{fields:[h.eventId],references:[c.id]}),user:e(n,{fields:[h.userNim],references:[n.nim]})})),b=o("classes",{id:text("id").primaryKey().$defaultFn(createId),title:varchar("title",{length:255}).notNull(),topic:varchar("topic",{length:100}),description:text("description").notNull(),speaker:varchar("speaker",{length:100}).notNull(),location:varchar("location",{length:100}).notNull(),date:timestamp("date",{mode:"date",withTimezone:!0}).notNull(),totalSeats:integer("totalSeats").notNull(),reservedSeats:integer("reservedSeats").default(0)}),Z=relations(b,({many:e})=>({users:e(n)})),y=o("postTests",{id:text("id").primaryKey().$defaultFn(createId),title:varchar("title",{length:255}).notNull(),description:text("description").notNull(),startTime:timestamp("startTime",{mode:"date",withTimezone:!0}),deadline:timestamp("deadline",{mode:"date",withTimezone:!0}).notNull(),googleFormLink:varchar("googleFormLink",{length:255}).notNull(),eventId:text("eventId").notNull().references(()=>c.id)}),x=o("postTestSubmissions",{postTestId:text("postTestId").notNull().references(()=>y.id),userNim:varchar("userNim",{length:100}).notNull().references(()=>n.nim),createdAt:timestamp("createdAt",{mode:"date",withTimezone:!0}).notNull().defaultNow()},e=>({pk:primaryKey({columns:[e.postTestId,e.userNim]}),userNimIdx:index("submission_usernim_idx").on(e.userNim)})),ee=relations(y,({one:e})=>({event:e(c,{fields:[y.eventId],references:[c.id]})})),te=relations(x,({one:e})=>({postTest:e(y,{fields:[x.postTestId],references:[y.id]}),user:e(n,{fields:[x.userNim],references:[n.nim]})})),ne=o("notifications",{id:text("id").primaryKey().$defaultFn(createId),content:text("content").notNull(),createdAt:timestamp("createdAt",{mode:"date",withTimezone:!0}).notNull().defaultNow()});

export { T as assignmentSubmissions, Y as assignmentSubmissionsRelations, P as assignmentTypeEnum, S as assignments, M as campusEnum, w as characters, B as classDayEnum, Z as classUserRelations, b as classes, o as createTable, k as eventDayEnum, h as eventPresences, X as eventPresencesRelations, c as events, j as eventsCharactersRelations, W as eventsRelations, F as facultyEnum, D as genderEnum, O as lembagaEnum, f as messages, Q as messagesRelations, ne as notifications, ee as postTestRelations, te as postTestSubmissionRelations, x as postTestSubmissions, y as postTests, K as presenceEventEnum, C as presenceTypeEnum, v as profiles, L as profilesRelations, G as resetTokenRelations, A as resetTokens, U as roleEnum, m as userMatches, J as userMatchesRelations, n as users, H as usersRelations };
